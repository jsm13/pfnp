* What's a program (30 min)
  A program is the way that we instruct a computer to do some work for us using a language.

  This is as opposed to the most prevalent way of issuing commands to a computer by way of a Graphical User Interface (GUI)

  Programming is the process of developing such a procedure in some programming language.

  These instuctons all regard data in memory -- reading, writing, and manipulating that data. Slightly mindbendingly (or not, if it makes sense to you, don't over think it at my suggestion) these instructions themselves are data in memory.

  In the form the instructions are interpreted by the machine, the manipulations are all relatively simple operations (load, jump, and perform an arithmetic or logical function) and are performed extremely quickly.

  These instructions are called machine code and like all data, are stored in the machine as binary -- while it takes more charaters to express data in binary than any other encoding, all data can be represented in binary charaters (bits) and again, computers are very fast at simple things like reading.

  People however, are not very fast at reading binary and even when these instructions are translated from binary to something human readable, an individual instruction makes more sense but the programs composed of these instructions are very difficult for humans to read or write.

  In "low-level" languages, instructions are written directly regarding this memory.

  We are fortunate to learn in a time of immensely powerful "high-level" languages when we can worry about logical constructs rather than the basic opperations of the processor, and the book-keeping of memory management is handled for us.

  While we don't need to worry about the tedious and error prone task of managing memory or being restricted to the CPUs pallet of opperations, it is always important to keep in mind what is going on under the hood as we write programs. It is impossible for us to understand the exact specifics of all that we do but it is very important to remember that there is no (at least not much) voodoo powering computers.

  At risk of distraction from the task at hand and to the extent it minimizes the feeling of mysticism, we do right by ourselves to explore.

** JavaScript (90 min)
   The high-level language we will explore today is called JavaScript. The name is the unfortunate consequence of a marketing decision; JavaScript has no more to do with Java than it does any other programming language

   You may also see JavaScript refered to as ECMAScript, a refference to the organization which maintains the language standard, the European Computer Manufacturers Association

   We write code as plain text in files more simple than word documents -- you can write runnable code in a simple text editor (textEdit on a mac, Notepad on a PC) but these won’t give you a lot of the bells and whistles that are especially helpful in writing code

   Today we will use an online IDE (integrated development environment) called [[https://jsbin.com/?js,console][JSBin]] to explore JavaScript

   We're going to come back to a lot of "why" about programming languages and JS specifically shortly, but we'll talk about "how" to get up and going first

*** Statements and Expressions
    in javascript, our two fundemental units of speech are the statement and the expression. A statement is an instruction to the runtime to "do something" while an expression is something to be evaluated. This is a bit abstract so let's explore an example.

    #+BEGIN_SRC javascript
    var myFirstVariable;
    #+END_SRC

    this fantastically unexciting statement is packed with important ideas! This is called a variable declaration. We are saying, "hey, runtime environment, I'm going to start talking about this thing 'myFirstVariable', so heads up." Just like in algebra, a variable represents a value. We have not yet assigned a value to "myFirstVariable" so if we ask our environment about it, we will see that it is ~undefined~ 

    #+BEGIN_SRC javascript
    console.log(myFirstVariable);
    #+END_SRC

    NOTE: producing output is actually the programming doing something; without an explicit log statement, code will be executed silently

    let's assign a value to ~myFirstVariable~

    #+BEGIN_SRC javascript
    myFirstVariable = 42
    #+END_SRC

    An assignment is really a type of expression; don't worry about this, the important take away is that it returns a value (the value being assigned, ie 42)

    Frequently these instuctons are combined into one which looks like

    #+BEGIN_SRC javascript
    var myFirstVariable = 42;
    #+END_SRC
   
    an expression on it's own is a valid statement but a statement is a special form which cannot be used as an expression

**** Semicolons
     Semicolons can be thought of like a period - it goes at the end of a statement to express the completion of the statement. Frequently the presence of the semicolon has no effect on the code (one is implicitly inserted by the runtime) but depending on this feature can cause aggrivating problems in edge cases and hurts code clarity

*** Expressions in Depth

    Expressions is composed of primitive values, collections, operators, and functions

**** Primitive Vales
     The most basic units we interact with in JavaScript are primitive values

     Primitive values are written literally and represent themselves; this should be clear as we get into examples.

     There are just 5 types of primitive values (the first two of which we’ll consider together):

     - Nothing: ~undefined~ & ~null~
     - Booleans: ~true~ & ~false~
     - Strings: ~"Hello world!"~, ~"A"~, ~"42"~, etc.
     - Numbers: ~1~, ~999~, ~7.35~, ~10e4~, etc.

**** Operators
     There are many operators but, like most things in programming, it would be a waste of time to learn them all.

     Many of the fundamental operators will make sense (and you will remember) immediately and for less common operators and nuances of any operators, depend on [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators][refference material]].
     
     There are assignment, comparison, arithmetic, bitwise, logical, and string operators

     We'll just talk about a small selection that will be more than enough to get you going.

     - Assignment
       - As we've seen, when we want to give a value a name that we can refer to later, we assign it to a variable with the assignment operator ~=~
       - any series of characters (not including punctuation except =_= and =$=) beginning with a non-numerical character is a valid variable name. There are some special language keywords that are also not allowed
     - Arithmetic
       - Most arithmetic operators are and work like what you would expect
       - try putting any of the following in the REPL ~5 + 5~ , ~15 * 12~ , ~1 / 3~
     - Comparison
       - ~>~ , ~<~ , ~<=~ and ~>=~ (≤ and ≥ respectively) will return the boolean value of the comparison
       - to check for equality, ~=~ will not work (since we use that for assignment). Instead use ~===~ ; ~==~ will also work but it’s a good habit to use the “strict” comparison with three ~=~ signs to avoid [[https://dorey.github.io/JavaScript-Equality-Table/][complexity]]
     - Logical
       - AND (~&&~) returns true if both of its operands are ~true~
       - OR (~||~) returns true _either_ (or both) of its operands are ~true~
       - NOT (~!~) returns the inverse boolean value of its operand. Any type can be provided to ~!~ and will be converted based on its [[https://developer.mozilla.org/en-US/docs/Glossary/Truthy][truthy]] or [[https://developer.mozilla.org/en-US/docs/Glossary/Falsy][falsy]] -ness
     - String
       - Comparison: we can use the comparison operators on strings. This may not always behave the way you expect; comparison is based on unicode values
       - Concatination: the ~+~ operator allows us to concatinate two strings (stick the second onto the end of the first: ~"Hello " + "world"~)
         - This demonstrates the overloading of ~+~

*** More on Statements
    We have already touched upon and will return later to _declaration statements_; these inform the runtime of variables we would like to associate values with so that we can refer to them later

    The next type we will discuss, flow control statements, will instruct the runtime of the order in which statements should run. Without flow control, a program will run, inuitively, from top to bottom

**** Flow Control
     Frequently, we will want to run certain code only is some condition is met. _Conditional Statements_ allow us to do this

***** Conditional
      A conditional statement begins with the keyword =if= followed by an expression thats truthy / falsyness determines if the block will be run.

      The block can be followed by an ~else~ keyword which then is followed by a second block to be run when the condition for the ~if~ is not met

      #+BEGIN_SRC javascript
      var age = 19,
      response;
      
      if (age < 21) {
        response = "Sorry, 21 and over";
      } else {
        response = "Thanks, have a good time";
      }
      
      console.log(response);
      #+END_SRC

      The else block is not required and will cause no problem if omitted.

      There is also a [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/switch][switch statement]] that will check the provided expression against cases and run the blocks that match but it has some oddieties and chained ~if ... else ... ~ statements are more flexible and usually prefered

      Other flow control statements regard exception creation and handling which we will not cover today

***** Looping
      Sometimes we want to do something for as long as a condition is met. The fundamental tool for doing this is the ~while~ statement

      #+BEGIN_SRC javascript
      var counter = 10;
      while (counter >= 0){
        console.log("count: ", counter);
        counter = counter - 1;
      }
      #+END_SRC

      The above while loop has a common pattern of setting a counter (initialization), checking the counter (condition), and updating the counter (final-expression)

      To do this in a more concise way, we use a for loop. The same code above can be expressed as:

      #+BEGIN_SRC javascript
      for (var counter = 10; counter >= 0; counter = counter - 1){
        console.log(counter);
      }
      #+END_SRC

      we can make a couple of changes that make this more concise; they don't effect the loop at all but are frequently seen in that context

      #+BEGIN_SRC javascript
      for (var i = 10; i >= 0; i--){
        console.log(i);
      }
      #+END_SRC

*** Composition & Abstraction
    our primary tools in writing programs are composition and abstraction. Composition is the process of combining simple parts to build something more complex. Abstraction is giving a name to an idea in a way that we don't have to worry about the details.
**** Composition
     just like legos, using a few generic pieces, by putting together generic pieces, we can build something unique and specialized.

*** Collections
    Frequently we need to collect primitive values into groups. We have two primary ways of doing _arrays_ are collections where we access by postion. Objects (called dictionaries in other languages) are accessed by value
    - [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array][Arrays]]
    - [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object][Objects]]

*** The Function
    our primary means of this is the Function. Functions are super cool. They let us package up our code for re-use, think about code in an isolated way and much more

    Earlier we used a conditional to express some logic for checking IDs at a bar. We can package up that logic into a function

    #+BEGIN_SRC javascript

    function bounce(age){
      if (age >= 21) {
        return "Have fun";
      } else {
        return "Sorry, kid";
      }
    }

    #+END_SRC

    and now we can invoke our function repeatedly:

    #+begin_src javascript
    var age = 96;
    var response = bounce(age);
    console.log(response);
    // we don't need to involve variables at all!
    console.log(bounce(17)); 
    #+end_src


* Lunch (30 min)

* Exercises
  - Code Abbey (http://www.codeabbey.com/)
  - Simple Programming Problems Repo (https://adriann.github.io/programming_problems.html)
  - Ubuntu Forum Challenges (https://ubuntuforums.org/showthread.php?t=876494)
  - Project Euler (https://projecteuler.net/)
* Web Development Overview (30 min)
** The Server and the Client
   when you go to a website, there are (simplified for conceptual perposes) two machines in play: the server and the client.

   [[./Client-Server_Model.jpg]]

*** The Server
    the server is a computer optimized to send and receive requests for information [picture of server]
*** The Client
    the client is the users computer, our computer when we browse the web
*** The Relationship
    when we browse the internet, 
    1. we type a URL and our browser makes an HTTP request (sends a special message) to an address associated with that addressd
    2. when the server receives the request, it processes it and responds with information
    3. this information is then processed by the browser and the website runs on our machine
** A Super Brief History
*** Web 1.0: linked documents
    think wiki. Pretty simple, primarily text with some media. Server rendered pages
*** Web 2.0: web apps
    think google maps. Rich applications similar to what we previously ran by buying CDs and installing on our machines
**** micro-services
*** Web 3.0: IoT
    Nest, Hue, etc.

* Examples (20 min)
** Static site
   Just html, css, and js opened locally (code along in online IDE)
** Server Rendered Sites, Services, and Persistence
   Using node / express backend (discuss other languages and highlight server / client difference)
*** [[https://github.com/expressjs/express/blob/master/examples/][Simple Express examples]]
** Libraries, Frameworks, and Third Party APIs
   React, Weather underground
* Tools (20 min)
** Node & NPM
   Node is a runtime for JS on the server side; NPM is a package management tool that comes bundled with Node
** git / GitHub
   learn it and you will be powerful! https://www.atlassian.com/git/ (skip learn Git in far left column)
** Google
   your best friend in development. You are almost never doing something for the first time -- if you are you either haven't broken it down enough, are doing something impossible / inadvisable, or you're about to change the world (slim shot)
** IDE (integrated development environment) / Text Editor
   code is just text! This is where you write that text
** Build Tools
   as soon as you begin building non-trivial apps, the number of bits to manage quickly becomes staggering -- build tools to save the day!
** Your Machine
   code runs on machines, you write code on machines, run the code as you are writing it! Tons of tools to make this easier / more powerful
** Your Brain
   programming takes a lot of thinking but it should be fun like a puzzle or building legos (thought legos that is)!
** Your Community
   despite popular conception, rarely do we code solo and even more rarely should we -- it is at best boring and at worst counter productive
** Resources
   see below
* Resources for Learning (20 min)
** General Assembly
   you're here! Congratulations! There's more if you're liking it so far (and if you're not that's probably my fault and there's a lot taught by other people, too so check them out but also tell me what I can do better)

   As many resources as there are for learning every aspect of web development, one of the most important aspects is some degree of community and mentorship. This is difficult and having people to learn with and learn from is invaluable

   Check out [[https://dash.generalassemb.ly/][Dash]] for online learning

** [[http://eloquentjavascript.net/][Eloquent JavaScript]]
   if you study this book diligently, I believe you could not only get a job in development but would quickly be an expert at work
** MeetUps
   there are great MeetUps for all kinds of tech things -- great way to meet people active in the community
** Free Tutorials
   Most major technologies have official tutorials (Rails tutorials are some of the best -- talk about why not discussing ruby today)
** Paid Tutorials
   [[https://www.codeschool.com/][CodeSchool]], [[https://www.pluralsight.com/][PluralSight]], Udemy, Coursera, etc.
** Books
   No Starch Press, O'Riely Press
** Do It
   Make something! Programming is more art than science and art begins in imitation. Do something that interests you and your enthusiasm will be an asset
* Q&A / Free code / John on a Soapbox (90 min)
** We write code to be read by people
   There are literally infinite ways to write code that will run and produce the right answer -- writing code that the next person intuitively understands is an art
** This is not a field for those afraid of change
   This is a constantly and rapidly changing world -- not only must you not fear change but you must be excited to embrace it
** Development is a group activity
   Play nicely! This is hard, the unknown and change are scary, and egos are delicate -- we can make this fun by treating others the way we'd like to be treated
** The Internet as the printing press
   Johannes Gutenberg invented the printing press in 1440, Tim Berners-Lee invented the World Wide Web in 1990. We don't have much better sense of how this will change the world than people the mid-15th century anticipated the effects of the printing press
